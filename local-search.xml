<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Postgresql编译安装</title>
    <link href="/2023/08/28/Postgresql/"/>
    <url>/2023/08/28/Postgresql/</url>
    
    <content type="html"><![CDATA[<h1>PostgreSQL编译安装</h1><h2 id="前提">前提</h2><ul><li>安装好的WSL2</li><li>Ubuntu 22.04 LTS版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu环境下</span><br>sudo apt-get install build-essential <br>sudo apt install libreadline-dev <br>sudo apt-get install zlib1g.dev<br></code></pre></td></tr></table></figure><h2 id="下载Pg的源码">下载Pg的源码</h2><blockquote><p><a href="https://www.postgresql.org/ftp/source/">Pg源码地址</a></p></blockquote><p>选择所需要的源码进行下载，下载完成后进行解压,例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://ftp.postgresql.org/pub/source/v15.4/postgresql-15.4.tar.gz<br>tar -zxvf postgresql-15.4.tar.gz<br>cd postgresql-15.4<br>mv postgresql-15.4 postgresql15<br></code></pre></td></tr></table></figure><h2 id="进行编译">进行编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --enable-debug<br>make -j<br>sudo make install<br></code></pre></td></tr></table></figure><p>由于Pg不能在root用户下进行启动,这里添加一个postgres用户并设置其密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">adduser postgres<br>passwd postgres<br></code></pre></td></tr></table></figure><h2 id="进行数据库配置">进行数据库配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建pg的数据存放目录</span><br>sudo mkdir -p /var/postgresql/data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">对/var/postgresql和/usr/local/pgsql进行授权</span><br>sudo chown postgres:postgres /var/postgresql -R<br>sudo chown postgres:postgres /usr/local/pgsql -R<br></code></pre></td></tr></table></figure><h2 id="切换用户并配置环境变量">切换用户并配置环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">su - postgres<br>export PATH=/usr/local/pgsql/bin:$PATH<br></code></pre></td></tr></table></figure><h2 id="初始化数据库并启动服务">初始化数据库并启动服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用-D指定初始化数据库存放的数据目录</span><br>initdb -D /var/postgresql/data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用-l指定pg日志存放的目录</span><br>pg_ctl -D /var/postgresql/data -l /var/postgresql/logfile start<br></code></pre></td></tr></table></figure><h2 id="连接Pg">连接Pg</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">psql <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake学习</title>
    <link href="/2023/08/28/CMake/"/>
    <url>/2023/08/28/CMake/</url>
    
    <content type="html"><![CDATA[<h1>CMake学习</h1><blockquote><p><a href="https://cmake.org/cmake/help/latest/">CMake官方文档</a></p></blockquote><h2 id="常用命令">常用命令</h2><p><code>cmake_minimum_required</code>：设置项目所需要的cmake的最低版本</p><p><code>project</code>：设置项目名及版本信息</p><p><code>add_executable</code>：使用指定的源文件生成可执行文件</p><p><code>set(CMAKE_CXX_STANDARD 14)</code>:指定 C++ 标准，这里是使用C++14</p><p><code>set(CMAKE_CXX_STANDARD_REQUIRED True)</code>：指定是否<code>CXX_STANDARD</code>是必须的</p><p><code>configure_file</code>:将文件复制到另一个位置并修改其内容</p><p><code>target_include_directories</code>:指定编译给定目标时要使用的包含目录</p><p><code>target_link_libraries</code>：指定链接给定目标或其依赖项时要使用的库或标志</p><h2 id="1-构建一个基本项目">1.构建一个基本项目</h2><h3 id="具体代码：">具体代码：</h3><h4 id="CMakeLists-txt">CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 设置CMake的最小版本需要</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-comment"># 设置项目名为Tutorial以及版本号为1.0</span><br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-comment"># 设置C++标准为C++11</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-comment"># 设置C++标准为必需</span><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><span class="hljs-comment"># 使用configure_file生成TutorialConfig.h头件，以此可以动态定义版本号等</span><br><span class="hljs-keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)<br><span class="hljs-comment"># 生成一个可执行程序Tutorial</span><br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cxx)<br><span class="hljs-comment"># 指定编译给定目标时要使用的包含目录为build目录</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="tutorial-cxx">tutorial.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TutorialConfig.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>    std::cout &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>&lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; number&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> inputValue = std::<span class="hljs-built_in">stod</span>(argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> outputValue = <span class="hljs-built_in">sqrt</span>(inputValue);<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;The square root of &quot;</span> &lt;&lt; inputValue &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; outputValue<br>            &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TutorialConfig-h-in"><a href="http://TutorialConfig.h.in">TutorialConfig.h.in</a></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@<br>#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@<br></code></pre></td></tr></table></figure><h2 id="2-添加库">2.添加库</h2><h3 id="具体代码：-2">具体代码：</h3><h4 id="CMakeLists-txt-2">CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">14</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><span class="hljs-keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)<br><span class="hljs-comment"># 添加MtahFucntions子目录到Tutorial中</span><br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cxx)<br><span class="hljs-comment"># 添加MathFucntions的库到Tutorial中</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions)<br><span class="hljs-comment"># 将MathFunctions目录包含到Tutorial中</span><br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                           <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                           <span class="hljs-string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/MathFunctions&quot;</span><br>                           )<br></code></pre></td></tr></table></figure><h4 id="tutorial-cxx-2">tutorial.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TutorialConfig.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>    std::cout &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class="hljs-string">&quot;.&quot;</span><br>              &lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; number&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> inputValue = std::<span class="hljs-built_in">stod</span>(argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> outputValue = mathfunctions::<span class="hljs-built_in">sqrt</span>(inputValue);<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;The square root of &quot;</span> &lt;&lt; inputValue &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; outputValue<br>            &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TutorialConfig-h-in-2"><a href="http://TutorialConfig.h.in">TutorialConfig.h.in</a></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@<br>#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-CMakeLists-txt">MathFunctions/CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 添加一个库，使用MathFunctions.cxx生成MathFucntions库</span><br><span class="hljs-keyword">add_library</span>(MathFunctions MathFunctions.cxx)<br><span class="hljs-comment"># 创建一个USE_MYMATH变量并设置默认值为ON。可以在cmake中使用-D命令进行指定</span><br><span class="hljs-keyword">option</span>(USE_MYMATH <span class="hljs-string">&quot;Use tutorial provided math implementation&quot;</span> <span class="hljs-keyword">ON</span>)<br><span class="hljs-comment"># 如果USE_MYMATH属性为ON, 使用target_compile_definitions来进行传递</span><br><span class="hljs-keyword">if</span> (USE_MYMATH)<br>  <span class="hljs-keyword">target_compile_definitions</span>(MathFunctions PRIVATE <span class="hljs-string">&quot;USE_MYMATH&quot;</span>)<br>  <span class="hljs-keyword">add_library</span>(SqrtLibrary STATIC mysqrt.cxx)<br>  <span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC SqrtLibrary)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-h">MathFunctions/mysqrt.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-cxx">MathFunctions/mysqrt.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-type">double</span> result = x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (result &lt;= <span class="hljs-number">0</span>) &#123;<br>      result = <span class="hljs-number">0.1</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> delta = x - (result * result);<br>    result = result + <span class="hljs-number">0.5</span> * delta / result;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Computing sqrt of &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; to be &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-h">MathFunctions/MathFunctions.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-cxx">MathFunctions/MathFunctions.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br><span class="hljs-meta">#  <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br>  <span class="hljs-keyword">return</span> detail::<span class="hljs-built_in">mysqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">sqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Tips: 编译命令<code>cmake -G &quot;MinGW Makefiles&quot; -DUSE_MYMATH=OFF ..</code></p><h2 id="3-添加库的使用要求">3.添加库的使用要求</h2><h3 id="具体代码：-3">具体代码：</h3><h4 id="CMakeLists-txt-3">CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.10</span>)<br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-comment"># 创建一个interface库</span><br><span class="hljs-keyword">add_library</span>(tutorial_compiler_flags INTERFACE)<br><span class="hljs-comment"># 指定cxx_std_11为目标编译器功能</span><br><span class="hljs-keyword">target_compile_features</span>(tutorial_compiler_flags INTERFACE cxx_std_11)<br><span class="hljs-keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)<br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cxx)<br><span class="hljs-comment"># 将Tutorial和MathFunctions链接到tutorial_compiler_flags</span><br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)<br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                           <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                           )<br></code></pre></td></tr></table></figure><h4 id="tutorial-cxx-3">tutorial.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TutorialConfig.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>    std::cout &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class="hljs-string">&quot;.&quot;</span><br>              &lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; number&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> inputValue = std::<span class="hljs-built_in">stod</span>(argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> outputValue = mathfunctions::<span class="hljs-built_in">sqrt</span>(inputValue);<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;The square root of &quot;</span> &lt;&lt; inputValue &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; outputValue<br>            &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="TutorialConfig-h-in-3"><a href="http://TutorialConfig.h.in">TutorialConfig.h.in</a></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@<br>#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-CMakeLists-txt-2">MathFunctions/CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(MathFunctions MathFunctions.cxx)<br><span class="hljs-comment"># 设置只有链接到MathFucntions库的需要包含MathFunctions源目录，而其自身则不需要</span><br><span class="hljs-keyword">target_include_directories</span>(MathFunctions INTERFACE <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">option</span>(USE_MYMATH <span class="hljs-string">&quot;Use tutorial provided math implementation&quot;</span> <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">if</span> (USE_MYMATH)<br>  <span class="hljs-keyword">target_compile_definitions</span>(MathFunctions PRIVATE <span class="hljs-string">&quot;USE_MYMATH&quot;</span>)<br>  <span class="hljs-keyword">add_library</span>(SqrtLibrary STATIC mysqrt.cxx)<br>  <span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC SqrtLibrary tutorial_compiler_flags)<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-h-2">MathFunctions/mysqrt.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-cxx-2">MathFunctions/mysqrt.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-type">double</span> result = x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (result &lt;= <span class="hljs-number">0</span>) &#123;<br>      result = <span class="hljs-number">0.1</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> delta = x - (result * result);<br>    result = result + <span class="hljs-number">0.5</span> * delta / result;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Computing sqrt of &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; to be &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-h-2">MathFunctions/MathFunctions.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-cxx-2">MathFunctions/MathFunctions.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br><span class="hljs-meta">#  <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br>  <span class="hljs-keyword">return</span> detail::<span class="hljs-built_in">mysqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">sqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-添加生成器表达式">4.添加生成器表达式</h2><h3 id="具体代码：-4">具体代码：</h3><h4 id="CMakeLists-txt-4">CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.15</span>)<br><span class="hljs-keyword">project</span>(Tutorial VERSION <span class="hljs-number">1.0</span>)<br><span class="hljs-keyword">add_library</span>(tutorial_compiler_flags INTERFACE)<br><span class="hljs-keyword">target_compile_features</span>(tutorial_compiler_flags INTERFACE cxx_std_11)<br><span class="hljs-keyword">set</span>(gcc_like_cxx <span class="hljs-string">&quot;$&lt;COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU,LCC&gt;&quot;</span>)<br><span class="hljs-keyword">set</span>(msvc_cxx <span class="hljs-string">&quot;$&lt;COMPILE_LANG_AND_ID:CXX,MSVC&gt;&quot;</span>)<br><span class="hljs-keyword">target_compile_options</span>(tutorial_compiler_flags INTERFACE<br>  <span class="hljs-string">&quot;$&lt;$&#123;gcc_like_cxx&#125;:$&lt;BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused&gt;&gt;&quot;</span><br>  <span class="hljs-string">&quot;$&lt;$&#123;msvc_cxx&#125;:$&lt;BUILD_INTERFACE:-W3&gt;&gt;&quot;</span><br>)<br><span class="hljs-keyword">configure_file</span>(TutorialConfig.h.in TutorialConfig.h)<br><span class="hljs-keyword">add_subdirectory</span>(MathFunctions)<br><span class="hljs-keyword">add_executable</span>(Tutorial tutorial.cxx)<br><span class="hljs-keyword">target_link_libraries</span>(Tutorial PUBLIC MathFunctions tutorial_compiler_flags)<br><span class="hljs-keyword">target_include_directories</span>(Tutorial PUBLIC<br>                           <span class="hljs-string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br>                           )<br><br></code></pre></td></tr></table></figure><h4 id="tutorial-cxx-4">tutorial.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TutorialConfig.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>    std::cout &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class="hljs-string">&quot;.&quot;</span><br>              &lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; number&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> inputValue = std::<span class="hljs-built_in">stod</span>(argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> outputValue = mathfunctions::<span class="hljs-built_in">sqrt</span>(inputValue);<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;The square root of &quot;</span> &lt;&lt; inputValue &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; outputValue<br>            &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="TutorialConfig-h-in-4"><a href="http://TutorialConfig.h.in">TutorialConfig.h.in</a></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@<br>#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-CMakeLists-txt-3">MathFunctions/CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(MathFunctions MathFunctions.cxx)<br><span class="hljs-keyword">target_include_directories</span>(MathFunctions INTERFACE <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)<br><span class="hljs-keyword">option</span>(USE_MYMATH <span class="hljs-string">&quot;Use tutorial provided math implementation&quot;</span> <span class="hljs-keyword">OFF</span>)<br><span class="hljs-keyword">if</span> (USE_MYMATH)<br>  <span class="hljs-keyword">target_compile_definitions</span>(MathFunctions PRIVATE <span class="hljs-string">&quot;USE_MYMATH&quot;</span>)<br>  <span class="hljs-keyword">add_library</span>(SqrtLibrary STATIC mysqrt.cxx)<br>  <span class="hljs-keyword">target_link_libraries</span>(SqrtLibrary PUBLIC tutorial_compiler_flags)<br>  <span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC SqrtLibrary)<br><span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">target_link_libraries</span>(MathFunctions PUBLIC tutorial_compiler_flags)<br><br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-h-3">MathFunctions/mysqrt.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-mysqrt-cxx-3">MathFunctions/mysqrt.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-keyword">namespace</span> detail &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mysqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-type">double</span> result = x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (result &lt;= <span class="hljs-number">0</span>) &#123;<br>      result = <span class="hljs-number">0.1</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> delta = x - (result * result);<br>    result = result + <span class="hljs-number">0.5</span> * delta / result;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Computing sqrt of &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; to be &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-h-3">MathFunctions/MathFunctions.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MathFunctions-MathFunctions-cxx-3">MathFunctions/MathFunctions.cxx</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MathFunctions.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br><span class="hljs-meta">#  <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysqrt.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">namespace</span> mathfunctions &#123;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> USE_MYMATH</span><br>  <span class="hljs-keyword">return</span> detail::<span class="hljs-built_in">mysqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">sqrt</span>(x);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题之路</title>
    <link href="/2023/08/27/Nowcoder/"/>
    <url>/2023/08/27/Nowcoder/</url>
    
    <content type="html"><![CDATA[<h1>刷题之路</h1><blockquote><p>记录自己的刷题历程</p></blockquote><h2 id="牛客">牛客</h2><h6 id="2023-08-27-共计刷题1道">- 2023/08/27 共计刷题<code>1</code>道</h6>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMU15-445</title>
    <link href="/2023/08/24/CMU/"/>
    <url>/2023/08/24/CMU/</url>
    
    <content type="html"><![CDATA[<h1>CMU15-445环境搭建及实操</h1><blockquote><p>官网：<a href="https://15445.courses.cs.cmu.edu/spring2023/">https://15445.courses.cs.cmu.edu/spring2023/</a></p></blockquote><h2 id="前提">前提</h2><p>提前安装好WSL2，这里我使用的系统是Ubuntu 22.04 LTS版</p><p>CMU15-445必需的环境：</p><ol><li>git</li><li>clang</li><li>gdb</li><li>cmake</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git cmake clang gdb<br></code></pre></td></tr></table></figure><h3 id="配置CMU15-445">配置CMU15-445</h3><ol><li><p>创建一个Github私有库</p></li><li><p>克隆公开的BusTub仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --bare https://github.com/cmu-db/bustub.git bustub-public</span><br></code></pre></td></tr></table></figure></li><li><p>将公共的BusTub存储库push到自己的私有BusTub存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd bustub-public<br>git push 你的私有库的git仓库地址 master<br>rm -rf bustub-public<br></code></pre></td></tr></table></figure></li><li><p>将私有存储库克隆到使用的开发计算机中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone 你的私有库的git仓库地址<br></code></pre></td></tr></table></figure></li><li><p><strong>从私有存储库的项目设置中禁用 GitHub Actions</strong>，否则您可能会用完 GitHub Actions 配额</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Settings &gt; Actions &gt; General &gt; Actions permissions &gt; Disable actions.<br></code></pre></td></tr></table></figure></li></ol><h3 id="编译CMU15-445">编译CMU15-445</h3><ol><li><p>为了确保您的计算机上有正确的软件包，请运行以下脚本来自动安装它们</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo build_support/packages.sh<br></code></pre></td></tr></table></figure></li><li><p>然后运行以下命令来构建系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build<br>cd build<br>cmake ..<br>make<br></code></pre></td></tr></table></figure></li><li><p>如果要在调试模式下编译系统，请将以下标志传递给 cmake,默认情况下，这会启用<a href="https://github.com/google/sanitizers">AddressSanitizer</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -DCMAKE_BUILD_TYPE=Debug ..<br>make -j`nproc`<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd build<br>make check-tests<br></code></pre></td></tr></table></figure></li></ol><h2 id="C-Primer">C++ Primer</h2><blockquote><p>详见<a href="https://15445.courses.cs.cmu.edu/spring2023/project0/">C++ Primer</a></p></blockquote><h2 id="Buffer-Pool-Manager">Buffer Pool Manager</h2><blockquote><p>详见<a href="https://15445.courses.cs.cmu.edu/spring2023/project1/">Buffer Pool Manager</a></p></blockquote><h2 id="B-Tree-Index">B+Tree Index</h2><blockquote><p>详见<a href="https://15445.courses.cs.cmu.edu/spring2023/project2/">B+Tree Index</a></p></blockquote><h2 id="Query-Execution">Query Execution</h2><blockquote><p>详见<a href="https://15445.courses.cs.cmu.edu/spring2023/project3/">Query Execution</a></p></blockquote><h2 id="Concurrency-Control">Concurrency Control</h2><blockquote><p>详见<a href="https://15445.courses.cs.cmu.edu/spring2023/project4/">Concurrency Control</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习</title>
    <link href="/2023/08/24/Git/"/>
    <url>/2023/08/24/Git/</url>
    
    <content type="html"><![CDATA[<h1>Git学习</h1><h2 id="关于版本控制">关于版本控制</h2><p>什么是“版本控制”？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h5 id="本地版本控制">本地版本控制</h5><p>本地版本控制中最流行的一种叫做 RCS ，现今许多计算机系统上都还看得到它的踪影。 RCS 的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。</p><p><img src="/imgs/Git/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt="本地版本控制"></p><h5 id="集中化版本控制">集中化版本控制</h5><p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统 （Centralized Version Control Systems，简称 CVCS）应运而生。这类系统，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时 内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无 疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。本地版本控制 系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p><p><img src="/imgs/Git/%E9%9B%86%E4%B8%AD%E5%8C%96%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt="集中化版本控制"></p><h5 id="分布式版本控制系统">分布式版本控制系统</h5><p>于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 在这类系统中，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像 下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><p><img src="/imgs/Git/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt="分布式版本控制"></p><h2 id="Git历史">Git历史</h2><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的 繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。他们对新的系统制订了若干目标：</p><ul><li><p>速度</p></li><li><p>简单的设计</p></li><li><p>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</p></li><li><p>完全分布式</p></li><li><p>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</p></li></ul><p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快， 极其适合管理大项目，有着令人难以置信的非线性分支管理系统。</p><h2 id="Git-是什么？">Git 是什么？</h2><h5 id="直接记录快照，而非差异比较">直接记录快照，而非差异比较</h5><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。从概念上来说，其它大部分系统以文件变更列表的方式存储信息，这类系统（CVS、Subversion、Perforce、Bazaar 等等） 将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异 （它们通常称作 基于差异（delta-based）的版本控制）。</p><p><img src="/imgs/Git/%E5%AD%98%E5%82%A8%E6%AF%8F%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%9D%E5%A7%8B%E7%89%88%E6%9C%AC%E7%9A%84%E5%B7%AE%E5%BC%82.png" alt="存储每个文件与初始版本的差异"></p><p>Git 不按照以上方式对待或保存数据。反之，Git 更像是把数据看作是对小型文件系统的一系列快照。在 Git中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git对待数据更像是一个快照流。</p><p><img src="/imgs/Git/%E5%AD%98%E5%82%A8%E9%A1%B9%E7%9B%AE%E9%9A%8F%E6%97%B6%E9%97%B4%E6%94%B9%E5%8F%98%E7%9A%84%E5%BF%AB%E7%85%A7.png" alt="存储项目随时间改变的快照"></p><p>这是 Git 与几乎所有其它版本控制系统的重要区别。 因此 Git 重新考虑了以前每一代版本控制系统延续下来的诸 多方面。Git 更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的 VCS。</p><h5 id="近乎所有操作都是本地执行">近乎所有操作都是本地执行</h5><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。 如果你习惯于所有操作都有网络延时开销的集中式版本控制系统，Git 在这方面会让你感到速度之神赐给了 Git 超凡的能量。因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。</p><h5 id="Git保证完整性">Git保证完整性</h5><p>Git中所有的数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。若你在传送过程中丢失信息或损坏文件，Git就能发现。</p><p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">24b9da6552252987aa493b52f8696cd6d3b00373<br></code></pre></td></tr></table></figure><p>Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p><h5 id="Git一般只添加数据">Git一般只添加数据</h5><p>你执行的 Git 操作，几乎只往 Git 数据库中添加数据。 你很难使用 Git 从数据库中删除数据，也就是说 Git 几乎不会执行任何可能导致文件不可恢复的操作。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容。但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。</p><h6 id="三种状态">三种状态</h6><p>Git 有三种状态，你的文件可能 处于其中之一： <code>已提交（committed）</code>、<code>已修改（modified）</code>和<code>已暂存（staged）</code>。</p><ul><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ul><p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p><p>![工作目录、暂存区域以及 Git 仓库](/imgs/Git/工作目录、暂存区域以及 Git 仓库.png)</p><p>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做“索 引”，不过一般说法还是叫“暂存区”。</p><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件。</li><li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li></ol><p>如果 Git 目录中保存着特定版本的文件，就属于已提交状态。 如果文件已修改并放入暂存区，就属于已暂存状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Miniob环境搭建</title>
    <link href="/2023/08/22/Miniob/"/>
    <url>/2023/08/22/Miniob/</url>
    
    <content type="html"><![CDATA[<h1>MiniOb环境搭建</h1><blockquote><p>本文简介MiniOb的环境搭建</p></blockquote><p>前提条件：详见<a href="https://oceanbase.github.io/miniob/game/gitee-instructions.html">https://oceanbase.github.io/miniob/game/gitee-instructions.html</a></p><ol><li><p>build libevent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add https://github.com/libevent/libevent deps/libevent<br>cd deps<br>cd libevent<br>git checkout release-2.1.12-stable<br>mkdir build<br>cd build<br>cmake .. -DEVENT__DISABLE_OPENSSL=ON<br>make<br>sudo make install<br></code></pre></td></tr></table></figure></li><li><p>build google_test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add https://github.com/google/googletest deps/googletest<br>cd deps<br>cd googletest<br>mkdir build<br>cd build<br>cmake ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure></li><li><p>build jsoncpp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add https://github.com/open-source-parsers/jsoncpp.git deps/jsoncpp<br>cd deps<br>cd jsoncpp<br>mkdir build<br>cd build<br>cmake -DJSONCPP_WITH_TESTS=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure></li><li><p>build miniob</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd `project home`<br>mkdir build<br>cd build<br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议开启DEBUG模式编译，更方便调试</span><br>cmake .. -DDEBUG=ON<br>make<br></code></pre></td></tr></table></figure><p>上述操作完成后进行git push即可进行提测。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++学习</title>
    <link href="/2023/08/08/Cpp/"/>
    <url>/2023/08/08/Cpp/</url>
    
    <content type="html"><![CDATA[<h1>C++学习</h1><h2 id="数组">数组</h2><blockquote><p>方便存放同类型的元素</p></blockquote><h3 id="一维数组">一维数组</h3><p>一维数组数组名代表数组的首地址</p><p>一维数组名可以计算出数组在内存空间所占内存大小</p><h3 id="二维数组">二维数组</h3><p>二维数组名代表二维数组的首地址，也可以查看某行的首地址</p><p>二维数组可以计算出数组在内存空间所占内存大小，也可以计算出某行所占内存大小</p><h2 id="指针">指针</h2><blockquote><p>作用：保存地址</p></blockquote><p>指针的定义：数据类型*指针变量名</p><p>32位操作系统指针所占内存空间：4个字节</p><p>64位操作系统指针所占内存空间：8个字节</p><h3 id="指针的两大类型">指针的两大类型</h3><p>空指针：</p><ol><li>指针变量指向内存编号为0的空间</li><li><strong>空指针指向内存无法访问</strong>，0~255内存编号给系统占用的，无法访问</li><li>可用于给指针变量初始化</li></ol><p>野指针：指针变量指向非法空间，要尽量避免</p><h3 id="const与指针结合">const与指针结合</h3><p>const修饰指针称为常量指针:<strong>指针指向的值不能变，指针的指向可以变</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//常量指针：指针指向的值不能变，指针的指向可以变</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p=&amp;a;<br><span class="hljs-type">int</span> b=<span class="hljs-number">30</span>;<br>p=&amp;b;<span class="hljs-comment">//指针的指向可以改，由指向a修改为指向b </span><br><span class="hljs-comment">//*p=b; 指向的值不能改 </span><br>cout&lt;&lt;*p&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>const修饰常量称为指针常量：<strong>指针指向的值可以改，指针的指向不可以修改</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//指针常量：指针指向的值可以改，指针的指向不可以修改</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;a;<br><span class="hljs-type">int</span> b=<span class="hljs-number">30</span>;<br>*p=b; <span class="hljs-comment">//指向的值可以改</span><br><span class="hljs-comment">//p=&amp;b;//指针的指向不能改</span><br>cout&lt;&lt;*p&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//const既修饰常量又修饰指针：指针的指向不能改，指针指向的值也不能改</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p=&amp;a;<br><span class="hljs-type">int</span> b=<span class="hljs-number">30</span>;<br><span class="hljs-comment">//*p=b; //指向的值不可以改</span><br><span class="hljs-comment">//p=&amp;b;//指针的指向不能改</span><br>cout&lt;&lt;*p&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针与数组">指针与数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//访问数组的第一种方式</span><br><span class="hljs-type">int</span> array[<span class="hljs-number">10</span>]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><span class="hljs-type">int</span> *p;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>cout&lt;&lt;array[i]&lt;&lt;endl;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;利用指针访问数组元素:&quot;</span>&lt;&lt;endl; <br>p=array;<br><span class="hljs-comment">//利用指针访问数组元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br>cout&lt;&lt;*p&lt;&lt;endl;<br>p++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针与函数">指针与函数</h3><p>值传递：不会改变实参的值</p><p>地址传递（引用传递）：会改变实参的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//指针函数</span><br><span class="hljs-comment">//值传递:不改变实参的值</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;交换前:a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; b:&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><span class="hljs-built_in">swap</span>(a,b);<br>cout&lt;&lt;<span class="hljs-string">&quot;交换后:a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; b:&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><span class="hljs-comment">//引用传递：改变实参的值</span><br>cout&lt;&lt;<span class="hljs-string">&quot;交换前:a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; b:&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><span class="hljs-built_in">swap2</span>(&amp;a,&amp;b);<br>cout&lt;&lt;<span class="hljs-string">&quot;交换后:a:&quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; b:&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp;<br>temp=a;<br>a=b;<br>b=temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp;<br>temp=*a;<br>*a=*b;<br>*b=temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体">结构体</h2><blockquote><p>属于用户自定义的数据类型</p></blockquote><p>结构体定义语法：struct 结构体名 {结构体成员列表}；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span> &#123;<br>string name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br>&#125; p3;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(people p)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//1. struct 结构体名变量名；</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span> p1;<br>p1.name=<span class="hljs-string">&quot;张三&quot;</span>;<br>p1.age=<span class="hljs-number">20</span>;<br>p1.sex=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">display</span>(p1);<br><span class="hljs-comment">//2. struct 结构体名变量名=&#123;值1，值2&#125;；</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span> p2= &#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">display</span>(p2);<br><span class="hljs-comment">//3. 定义结构体时顺便创建变量；</span><br>p3.name=<span class="hljs-string">&quot;王五&quot;</span>;<br>p3.age=<span class="hljs-number">26</span>;<br>p3.sex=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">display</span>(p3);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(people p)</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;p.name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;p.age&lt;&lt;<span class="hljs-string">&quot; sex:&quot;</span>&lt;&lt;p.sex&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体数组">结构体数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span> &#123;<br>string name;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//结构体数组定义</span><br>people ps[<span class="hljs-number">2</span>]= &#123;<br>&#123;<span class="hljs-string">&quot;刘邦&quot;</span>,<span class="hljs-number">200</span>&#125;,<br>&#123;<span class="hljs-string">&quot;周瑜&quot;</span>,<span class="hljs-number">2000</span>&#125;<br>&#125;;<br><span class="hljs-comment">//结构体遍历 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++) &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;ps[i].name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;ps[i].age&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体指针">结构体指针</h3><p>作用：通过指针访问结构体中的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">people</span> &#123;<br>string name;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>people p1= &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">100</span>&#125;;<br>people *p=&amp;p1;<br><span class="hljs-comment">//利用结构体指针进行访问</span><br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;p-&gt;age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存四区">内存四区</h2><h3 id="代码区">代码区</h3><p>用途：存放<strong>函数体的二进制代码</strong>，由操作系统进行管理</p><p>代码区是共享的，共享是针对需要频繁执行的程序，只需要在内存中有一份代码即可</p><p>代码区是只读的，只读为了防止程序意外修改了指令</p><h3 id="栈区">栈区</h3><p>用途：有编译器自动分配释放，存放<strong>函数的参数值、局部变量</strong>等</p><h3 id="堆区">堆区</h3><p>用途：由程序员分配和释放，若程序员不分配释放，程序结束时由操作系统回收</p><p>使用new关键字进行内存申请，使用delete关键字进行内存释放，数组需要使用delete[]进行释放</p><h3 id="全局区">全局区</h3><p>用途：存放<strong>全局变量、静态变量以及常量</strong></p><p>包含常量区、字符串常量和其他常量</p><p>包括<strong>全局变量、全局常量、静态变量和字符串常量</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//全局变量</span><br><span class="hljs-type">int</span> g=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//全局常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> j=<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//局部变量</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;a=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;a&lt;&lt;<span class="hljs-string">&quot; &amp;b=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;b&lt;&lt;endl;<br><span class="hljs-comment">//局部常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c=<span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> d=<span class="hljs-number">20</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;c=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;c&lt;&lt;<span class="hljs-string">&quot; &amp;d=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;d&lt;&lt;endl;<br><span class="hljs-comment">//静态变量</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> e=<span class="hljs-number">10</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> f=<span class="hljs-number">10</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;e=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;e&lt;&lt;<span class="hljs-string">&quot; &amp;f=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;f&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;g=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;g&lt;&lt;<span class="hljs-string">&quot; &amp;h=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;h&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;i=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;i&lt;&lt;<span class="hljs-string">&quot; &amp;j=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;j&lt;&lt;endl;<br><span class="hljs-comment">//字符串常量</span><br>cout&lt;&lt;<span class="hljs-string">&quot;&amp;str=&quot;</span>&lt;&lt;(<span class="hljs-type">int</span> *)&amp;<span class="hljs-string">&quot;hello world&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-特点">C++特点</h2><h3 id="引用">引用</h3><blockquote><p>给内存地址取别名，本质是指针常量</p></blockquote><p>基本语法：数据类型 &amp;别名=原名</p><p>注意事项：引用必须初始化，一旦初始化不可更改</p><p>引用做函数参数：可以简化指针修改实参</p><p>引用做函数返回值：可以作为函数左值，但是不要返回局部变量的引用</p><p>常引用：可以防止形参改变实参，即变为只读状态</p><h3 id="函数进阶">函数进阶</h3><p>函数默认参数：返回值类型函数名（参数=默认值）{}，如果某个参数有默认值那么从这和默认值开始从左向右都得有默认值；函数声明有默认值，那么实现就不能有默认值。</p><p>函数的占位参数：调用时必须传递实参。</p><p>函数重载：同一个作用域，函数名称相同，函数的参数类型不同或者个数不同或者顺序不同；返回值不作为函数重载的条件。</p><h2 id="面向对象">面向对象</h2><h3 id="封装">封装</h3><p>ex:设计圆类，通过半径求周长</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-comment">//半径</span><br><span class="hljs-type">float</span> radius;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*PI*radius;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Circle c;<br>c.radius=<span class="hljs-number">10</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;圆的周长为：&quot;</span>&lt;&lt;c.<span class="hljs-built_in">calc</span>()&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问权限：</p><table><thead><tr><th>权限类型</th><th>类内</th><th>类外</th></tr></thead><tbody><tr><td>public</td><td>允许</td><td>允许</td></tr><tr><td>protected</td><td>允许</td><td>不允许</td></tr><tr><td>private</td><td>允许</td><td>不允许</td></tr></tbody></table><p>对于protected儿子可以访问父亲的保护内容</p><p>对于private儿子不可以访问父亲的保护内容</p><h3 id="对象特性">对象特性</h3><blockquote><p>空对象占用1bit的内存空间，编译器会给每个空对象也分配一个字节，是为了区分空对象的位置</p></blockquote><h4 id="构造函数和析构函数">构造函数和析构函数</h4><p>不提供构造函数和析构函数，编译器会默认提供空实现的构造函数和析构函数。</p><p>构造函数（进行初始化操作）：类名（）{}</p><p>构造函数的分类：</p><ol><li>有参构造和无参构造</li><li>普通构造和拷贝构造</li></ol><p>调用方法：</p><ol><li>括号法：调用无参构造函数时别带小括号，否则编译器会认为是函数的声明</li><li>显示法：不能用拷贝构造函数初始化匿名对象，编译器会默认忽视小括号，从而造成重定义</li><li>隐式法</li></ol><p>调用规则：</p><ol><li>如果用户自定义有参构造函数，C++就不再提供默认无参构造函数，但是会提供默认拷贝构造函数</li><li>如果用户自定义拷贝构造函数，C++不在提供其他构造函数</li></ol><p>析构函数（进行销毁操作）：~类名（）{}</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Man</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;无参构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">Man</span>(string name) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=name;<br>cout&lt;&lt;<span class="hljs-string">&quot;有参构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">Man</span>(<span class="hljs-type">const</span> Man &amp;m) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=m.name;<br><span class="hljs-keyword">this</span>-&gt;age=m.age;<br>cout&lt;&lt;<span class="hljs-string">&quot;拷贝构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">Man</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>string name;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">调用方式:</span><br><span class="hljs-comment">括号法</span><br><span class="hljs-comment">显示法</span><br><span class="hljs-comment">隐式法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//方式一:括号法</span><br>Man m;<br><span class="hljs-function">Man <span class="hljs-title">m1</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span>)</span></span>;<br><span class="hljs-function">Man <span class="hljs-title">m2</span><span class="hljs-params">(m1)</span></span>;<br><span class="hljs-comment">/*注意：调用无参构造函数时别带小括号，这一点可Java有所不同，</span><br><span class="hljs-comment">同时使用this-&gt;而不是this.*/</span><br><span class="hljs-comment">//方式二：显示法</span><br>Man m3=<span class="hljs-built_in">Man</span>();<br>Man m4=<span class="hljs-built_in">Man</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>Man m5=<span class="hljs-built_in">Man</span>(m4);<br><span class="hljs-comment">//匿名对象</span><br><span class="hljs-built_in">Man</span>(<span class="hljs-string">&quot;赵四&quot;</span>);<br><span class="hljs-comment">/*不能用拷贝构造函数初始化匿名对象</span><br><span class="hljs-comment">Man(m5)==Man m5,编译器会忽略小括号</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//方式三：隐式法</span><br>Man m6=m5;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>拷贝构造函数的作用：</p><ol><li>使用一个已经创建完毕的对象来初始化新对象</li><li>值传递的方式传参</li><li>值方式返回局部对象</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;默认构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">People</span>(string name,<span class="hljs-type">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=name;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br>cout&lt;&lt;<span class="hljs-string">&quot;有参构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">People</span>(<span class="hljs-type">const</span> People &amp;p) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=p.name;<br><span class="hljs-keyword">this</span>-&gt;age=p.age;<br>cout&lt;&lt;<span class="hljs-string">&quot;拷贝构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>string name;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(People p)</span> </span>&#123;<br><br>&#125;<br><span class="hljs-function">People <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//方式一：用一个已经创建好的对象来初始化新对象</span><br><span class="hljs-comment">//People p(&quot;张三&quot;,18);</span><br><span class="hljs-comment">//People p1(p);</span><br><span class="hljs-comment">//方式二：用于函数传参</span><br><span class="hljs-comment">//test(p);</span><br><span class="hljs-comment">//方式三：用于返回局部对象</span><br>People p1=<span class="hljs-built_in">test1</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;p1.name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;p1.age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="深拷贝与浅拷贝">深拷贝与浅拷贝</h4><p>浅拷贝：简单的赋值操作，会导致内存重复释放</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;无参构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">People</span>(string name,<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> height) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=name;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br><span class="hljs-keyword">this</span>-&gt;height=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(height);<br>cout&lt;&lt;<span class="hljs-string">&quot;有参构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">People</span>(<span class="hljs-type">const</span> People &amp;p) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=p.name;<br><span class="hljs-keyword">this</span>-&gt;age=p.age;<br><span class="hljs-comment">//this-&gt;height=p.height;//为了解决浅拷贝所带来的内存重复释放的问题，在拷贝时主动向堆区申请一块内存空间</span><br><span class="hljs-keyword">this</span>-&gt;height=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.height);<span class="hljs-comment">//此语句解决浅拷贝所带的问题 </span><br>cout&lt;&lt;<span class="hljs-string">&quot;拷贝构造函数&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">People</span>() &#123;<br><span class="hljs-keyword">if</span>(height!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> height;<br>height=<span class="hljs-literal">NULL</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>string name;<span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> *height;<span class="hljs-comment">//身高</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;张胜男&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">170</span>)</span></span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;p.name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;p.age&lt;&lt;<span class="hljs-string">&quot; height:&quot;</span>&lt;&lt;*p.height&lt;&lt;endl;<br><span class="hljs-function">People <span class="hljs-title">p1</span><span class="hljs-params">(p)</span></span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;name:&quot;</span>&lt;&lt;p1.name&lt;&lt;<span class="hljs-string">&quot; age:&quot;</span>&lt;&lt;p1.age&lt;&lt;<span class="hljs-string">&quot; height:&quot;</span>&lt;&lt;*p1.height&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="初始化列表">初始化列表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> sex):<span class="hljs-built_in">age</span>(age),<span class="hljs-built_in">sex</span>(sex)&#123;<br>&#125;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">18</span>,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态成员">静态成员</h4><ul><li><p>静态成员变量</p><ul><li>所有对象共享一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li><p>静态成员函数：可以通过对象或类名访问</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量，不能访问非静态成员变量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>() &#123;<br>&#125;<br><span class="hljs-built_in">People</span>(<span class="hljs-type">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br>&#125;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sex;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;性别是:&quot;</span>&lt;&lt;sex&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//  类外初始化</span><br><span class="hljs-type">int</span> People::sex=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//方式一：对象名</span><br><span class="hljs-function">People <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>p.<span class="hljs-built_in">func</span>();<br><span class="hljs-comment">//方式二：类名</span><br>People::<span class="hljs-built_in">func</span>(); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="this指针与空指针">this指针与空指针</h4><p>this的用途：解决命名冲突和制造链式调用</p><p>空指针也能访问成员函数，需要加以判断保证代码的健壮性</p><h4 id="常函数和常对象">常函数和常对象</h4><ol><li>常函数内不可以修改成员属性</li><li>成员属性加mutable后就可以修改属性</li></ol><p>常对象只能调用常函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> sex) &#123;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br><span class="hljs-keyword">this</span>-sex=sex;<br>&#125;<br><span class="hljs-comment">//常函数 ，加const后实际上修饰的是this，则this指向的内容也不可以改 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;age:&quot;</span>&lt;&lt;age&lt;&lt;<span class="hljs-string">&quot; sex:&quot;</span>&lt;&lt;sex&lt;&lt;endl;<br>&#125;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> sex;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="友元">友元</h3><h4 id="全局函数做友元">全局函数做友元</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-comment">//告诉编译器goodBrother是People的友元函数，可以访问private变量</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodBrother</span><span class="hljs-params">(People &amp;p)</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>() &#123;<br><span class="hljs-keyword">this</span>-&gt;sitroom=<span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;bedroom=<span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string sitroom;<br><span class="hljs-keyword">private</span>:<br>string bedroom;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodBrother</span><span class="hljs-params">(People &amp;p)</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;好兄弟正在进入你的&quot;</span>&lt;&lt;p.sitroom&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;好兄弟正在进入你的&quot;</span>&lt;&lt;p.bedroom&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>People p;<br><span class="hljs-built_in">goodBrother</span>(p);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="友元类">友元类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Brother</span> &#123;<br><span class="hljs-comment">//声明People是Brother的友元类</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Brother</span>() &#123;<br>wc=<span class="hljs-string">&quot;厕所&quot;</span>;<br>bathroom=<span class="hljs-string">&quot;浴室&quot;</span>;<br>&#125;<br>string wc;<br><span class="hljs-keyword">private</span>:<br>string bathroom;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>() &#123;<br>sittingroom=<span class="hljs-string">&quot;客厅&quot;</span>;<br>bedroom=<span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br>string sittingroom;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(Brother &amp;b)</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;正在访问好兄弟的&quot;</span>&lt;&lt;b.bathroom&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>string bedroom;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Brother b;<br>People p;<br>p.<span class="hljs-built_in">visit</span>(b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="成员函数做友元">成员函数做友元</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//成员函数做友元</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodGay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GoodGay</span>();<br>    ~<span class="hljs-built_in">GoodGay</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 让 visit 访问Building中的私有函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit2</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 让 visit2 不可以访问Building中的私有函数</span><br>    Building *building;<span class="hljs-comment">//指向对象的指针，在构造函数中要初始化指针</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br>    <span class="hljs-comment">//GoodGay类下的visit成员函数作为本类的好朋友，可以访问私有成员变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">GoodGay::visit</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br>    string m_SittingRoom;<br>    <span class="hljs-built_in">Building</span>();<br><span class="hljs-keyword">private</span>:<br>    string m_BedRoom;<br>&#125;;<br>Building::<span class="hljs-built_in">Building</span>()<br>&#123;<br>    m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br>    m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br>GoodGay::<span class="hljs-built_in">GoodGay</span>()<br>&#123;<br>    <span class="hljs-comment">//创建一个建筑物的对象</span><br>    <span class="hljs-comment">//用new再堆区中申请一片空间返回的是一个指针，用building来接受这个指针，完成building初始化</span><br>    building = <span class="hljs-keyword">new</span> Building; <br>&#125;<br>GoodGay::~<span class="hljs-built_in">GoodGay</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> building;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GoodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;visit函数: Public &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;visit函数: Private &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GoodGay::visit2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;visit2函数: Public &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>    <span class="hljs-comment">//visit2函数不是Building的友元函数，不能访问其私有变量m_BedRoom</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    GoodGay gg;<br>    gg.<span class="hljs-built_in">visit</span>();<br>    gg.<span class="hljs-built_in">visit2</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符重载">运算符重载</h3><h4 id="加号运算符重载">加号运算符重载</h4><p>成员函数重载+运算符和全局函数重载+运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//加号运算符重载</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Number</span>() &#123;<br>&#125;<br><span class="hljs-built_in">Number</span>(<span class="hljs-type">int</span> n) &#123;<br><span class="hljs-keyword">this</span>-&gt;num=n;<br>&#125;<br><span class="hljs-comment">//成员函数重载+</span><br><span class="hljs-comment">//Number operator+(Number &amp;n) &#123;</span><br><span class="hljs-comment">//Number temp;</span><br><span class="hljs-comment">//temp.num=this-&gt;num+n.num;</span><br><span class="hljs-comment">//return temp;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-type">int</span> num;<br>&#125;;<br><span class="hljs-comment">//全局函数重载+</span><br>Number <span class="hljs-keyword">operator</span>+(Number &amp;n1,Number &amp;n2) &#123;<br>Number n3;<br>n3.num= n1.num+n2.num;<br><span class="hljs-keyword">return</span> n3;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">Number <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Number <span class="hljs-title">n1</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span></span>;<br>Number n2=n+n1;<br>cout&lt;&lt;n2.num&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="左移运算符重载">左移运算符重载</h4><p>只能利用全局函数重载左移运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//左移运算符重载&lt;&lt;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br><span class="hljs-comment">//如果数据私有可以使用友元</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Number</span>(<span class="hljs-type">int</span> n) &#123;<br><span class="hljs-keyword">this</span>-&gt;num=n;<br>&#125;<br><span class="hljs-type">int</span> num;<br><br>&#125;;<br><span class="hljs-comment">//全局函数重载&lt;&lt;运算符</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;cout,Number &amp;n) &#123;<br>cout&lt;&lt;n.num;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">Number <span class="hljs-title">n1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>cout&lt;&lt;n1&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递增运算符重载">递增运算符重载</h4><p>前置++运算符重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">Number</span>() &#123;<br><br>&#125;<br><span class="hljs-built_in">Number</span>(<span class="hljs-type">int</span> num) &#123;<br><span class="hljs-keyword">this</span>-&gt;num=num;<br>&#125;<br><span class="hljs-type">int</span> num;<br><span class="hljs-comment">//前置++重载</span><br>Number&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>++num;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;cout,Number n) &#123;<br>cout&lt;&lt;n.num;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">Number <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>cout&lt;&lt;++(++n)&lt;&lt;endl;<br>cout&lt;&lt;n&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后置++运算符重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;cout,Number n);<br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">Number</span>() &#123;<br><br>&#125;<br><span class="hljs-built_in">Number</span>(<span class="hljs-type">int</span> num) &#123;<br><span class="hljs-keyword">this</span>-&gt;num=num;<br>&#125;<br><span class="hljs-comment">//前置++重载</span><br>Number&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>++num;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-comment">//后置 ++重载</span><br>Number <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;<br>Number temp=*<span class="hljs-keyword">this</span>;<br>num++;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-type">int</span> num;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;cout,Number n) &#123;<br>cout&lt;&lt;n.num;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">Number <span class="hljs-title">n</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>cout&lt;&lt;n++;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="赋值运算符重载">赋值运算符重载</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(<span class="hljs-type">int</span> age) &#123;<br>p_age=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(age);<br>&#125;<br>~<span class="hljs-built_in">People</span>() &#123;<br><span class="hljs-keyword">if</span>(p_age!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> p_age;<br>p_age=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//=运算符重载</span><br>People&amp; <span class="hljs-keyword">operator</span>=(People &amp;p) &#123;<br><span class="hljs-comment">//如果自身有内存先释放干净</span><br><span class="hljs-keyword">if</span>(p_age!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> p_age;<br>p_age=<span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;p_age= <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.p_age);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-type">int</span> *p_age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">People <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br>p2=p1;<br>cout&lt;&lt;<span class="hljs-string">&quot;age:&quot;</span>&lt;&lt;*p2.p_age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关系运算符重载">关系运算符重载</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br><br>&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br>&#125;<br><span class="hljs-comment">//关系运算符重载</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(Person &amp;p) &#123;<br><span class="hljs-keyword">if</span>(p.age==<span class="hljs-keyword">this</span>-&gt;age) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> age;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;cout,Person &amp;p) &#123;<br>cout&lt;&lt;p.age;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-keyword">if</span>(p==p1) &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;相等&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数调用运算符重载">函数调用运算符重载</h4><p>又称为仿函数，写法很灵活</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Print</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Print</span>() &#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(string valueString)</span> </span>&#123;<br>cout&lt;&lt;valueString&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Print print;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承">继承</h3><p>用处：去重，减少冗余</p><blockquote><p>语法:class 派生类：继承方式 父类</p></blockquote><p>三种继承方式：（父类中的私有属性，子类无论哪种继承都访问不到）</p><ol><li>公共继承：父类的public和protected属性保持不变，私有属性访问不到</li><li>保护继承：父类的public和protected属性变为子类的protected属性，私有属性访问不到</li><li>私有继承：父类的public和protected属性变为子类的private属性，私有属性访问不到</li></ol><p><strong>父类中所有的非静态成员属性都会被子类继承下去，只是私有属性被编译器隐藏了，所以访问不到</strong></p><p>查看对象模型：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cl /dl reportSingleClassLayout类名 文件名<br></code></pre></td></tr></table></figure><h4 id="继承中的构造和析构的顺序">继承中的构造和析构的顺序</h4><p>析构顺序与构造顺序相反</p><p>父类构造-&gt;子类构造-&gt;子类析构-&gt;父类析构</p><h4 id="子类继承访问同名成员的处理">子类继承访问同名成员的处理</h4><ol><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，加作用域即可</li><li>子类出现和父类同名的成员，子类会隐藏父类所有的同名成员函数</li></ol><h4 id="子类继承访问静态成员的处理">子类继承访问静态成员的处理</h4><p>两种访问方式：对象名和类名</p><ol><li>访问子类同名成员，直接访问即可</li><li>访问父类同名成员，加作用域即可</li><li>子类出现和父类同名的静态成员，子类会隐藏父类所有的同名静态成员函数</li></ol><h4 id="多继承（不建议使用）">多继承（不建议使用）</h4><blockquote><p>语法：class子类：继承方式父类1，继承方式父类2</p></blockquote><h4 id="菱形继承">菱形继承</h4><p>概念：两个类继承一个基类，又有一个类继承这两个派生类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//动物类</span><br><span class="hljs-comment">//通过使用virtual关键字解决菱形继承问题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-comment">//羊类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;<br>&#125;;<br><span class="hljs-comment">//驼类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuo</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;<br>&#125;;<br><span class="hljs-comment">//羊驼类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepTuo</span>:<span class="hljs-keyword">public</span> Sheep,<span class="hljs-keyword">public</span> Tuo &#123;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>SheepTuo st;<br>st.Tuo::age=<span class="hljs-number">28</span>;<br>st.Sheep::age=<span class="hljs-number">18</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;st.Sheep::age:&quot;</span>&lt;&lt;st.Sheep::age&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;st.Tuo::age:&quot;</span>&lt;&lt;st.Tuo::age&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;st.age:&quot;</span>&lt;&lt;st.age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态">多态</h3><ol><li>静态多态：函数重载和运算符重载，编译阶段确定函数地址，地址早绑定</li><li>动态多态：派生类和虚函数，运行阶段确定函数地址，地址晚绑定</li></ol><h4 id="虚函数">虚函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//此刻地址早绑定</span><br><span class="hljs-comment">//void speak() &#123;</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;动物在说话&quot;&lt;&lt;endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//加virtual变成虚函数地址晚绑定</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;动物在说话&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;喵喵~~&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<span class="hljs-keyword">public</span> Animal  &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;汪汪~~&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Cat cat;<br>Dog dog;<br><span class="hljs-comment">//Animal &amp;animal=cat;</span><br>Animal &amp;animal=dog;<br>animal.<span class="hljs-built_in">speak</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="纯虚函数和抽象类">纯虚函数和抽象类</h4><p>有纯虚函数的类称为抽象类</p><p>语法：virtual 返回值类型函数名（参数列表）=0；</p><p>抽象类特点：</p><ol><li>无法实例化</li><li>子类必须重写抽象类的纯虚函数，否则子类也属于抽象类</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//变成纯虚函数 </span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;喵喵~~&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<span class="hljs-keyword">public</span> Animal  &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;汪汪~~&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Cat cat;<br>Dog dog;<br><span class="hljs-comment">//Animal &amp;animal=cat;</span><br>Animal &amp;animal=dog;<br>animal.<span class="hljs-built_in">speak</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="虚析构和纯虚析构">虚析构和纯虚析构</h4><p>有纯虚析构的类也称为抽象类</p><blockquote><p>用处：如果子类属性开辟到堆区，那么父类指针在释放时无法调用子类的析构代码</p></blockquote><p>虚析构语法：virtual ~类名（）{}</p><p>纯虚析构：virtual ~类名（）=0；必须要有具体实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Animal</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Animal构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-comment">//利用虚析构</span><br><span class="hljs-comment">//virtual ~Animal() &#123;</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;Animal析构函数调用&quot;&lt;&lt;endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//利用纯虚析构</span><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>()=<span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">Cat</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Cat构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">Cat</span>(string name) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>cout&lt;&lt;<span class="hljs-string">&quot;Cat有参构造函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>~<span class="hljs-built_in">Cat</span>() &#123;<br><span class="hljs-keyword">if</span>(name!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> name;<br>name=<span class="hljs-literal">NULL</span>;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;Cat析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>string *name;<br>&#125;;<br>Animal::~<span class="hljs-built_in">Animal</span>() &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Animal析构函数调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>Animal *animal=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>(<span class="hljs-string">&quot;小白&quot;</span>);<br><span class="hljs-keyword">delete</span> animal;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-泛型编程">C++泛型编程</h2><h3 id="模板">模板</h3><blockquote><p>用途：提高复用性</p></blockquote><h4 id="函数模板">函数模板</h4><p>语法：template<typename T>，typename可以用class代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//利用模板</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(T &amp;a,T &amp;b)</span> </span>&#123;<br>T temp;<br>temp=a;<br>a=b;<br>b=temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br><span class="hljs-type">float</span> c=<span class="hljs-number">10.9</span>,d=<span class="hljs-number">10.6</span>;<br><span class="hljs-built_in">Swap</span>(a,b);<br>cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; ,&quot;</span>&lt;&lt;b&lt;&lt;endl;<br><span class="hljs-built_in">Swap</span>(c,d);<br>cout&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot; ,&quot;</span>&lt;&lt;d&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="普通函数与模板函数的区别">普通函数与模板函数的区别</h5><ul><li>普通函数可以自动类型转换</li><li>函数模板如果使用自动类型，不会发生自动类型转换</li><li>函数模板如果使用指定类型，会发生自动类型转换</li></ul><h5 id="普通函数与模板函数的调用规则">普通函数与模板函数的调用规则</h5><ol><li>函数模板和普通函数都可以，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以重载</li><li>如果函数模板能更好匹配，优先调用函数模板</li></ol><h5 id="模板的局限性">模板的局限性</h5><p>对于数组和对象来说，可以使用template&lt;&gt;重写一个模板具体实现</p><h4 id="类模板">类模板</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(NameType name,AgeType age) &#123;<br><span class="hljs-keyword">this</span>-&gt;name=name;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br>&#125;<br>NameType name;<br>AgeType age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">People&lt;string,<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>)</span></span>;<br>cout&lt;&lt;p.name&lt;&lt;p.age&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类模板的成员函数的创建时机">类模板的成员函数的创建时机</h5><p>类模板中成员函数只在调用时才去创建</p><h5 id="类模板对象做函数参数">类模板对象做函数参数</h5><p>传入方式</p><ol><li>指定传入方式</li><li>参数模板化</li><li>整个类模板化</li></ol><h5 id="类模板继承">类模板继承</h5><ol><li>当子类继承父类是一个类模板时，子类在声明时，要指出父类中的数据类型</li><li>不指定，编译器无法给子类分配内存</li><li>如果要灵活支出父类中的数据类型，子类也要变成类模板</li></ol><h3 id="STL">STL</h3><blockquote><p>查阅API即可，深入理解阅读《STL源码剖析》</p></blockquote><h4 id="容器">容器</h4><h5 id="String">String</h5><blockquote><p>string本质上是一个类，内部封装了char *,是一个char *的容器</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>string str=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *ch=<span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-function">string  <span class="hljs-title">str1</span><span class="hljs-params">(ch)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">str2</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br>str+=<span class="hljs-string">&quot;world&quot;</span>;<br>cout&lt;&lt;str&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;str1&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;str2&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Vector">Vector</h5><blockquote><p>功能：类似数组，又称为单端数组，可以动态扩展（找更大的内存空间，将数据拷贝，释放原空间）</p></blockquote><h6 id="vector存放内置数据类型">vector存放内置数据类型</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>cout&lt;&lt;value&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-comment">//vector容器，类似于数组</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itBegin=v.<span class="hljs-built_in">begin</span>();<span class="hljs-comment">//起始迭代器，指向容器中第一个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd=v.<span class="hljs-built_in">end</span>();<span class="hljs-comment">//结束迭代器，指向容器中最后一个元素的下一个位置</span><br>cout&lt;&lt;<span class="hljs-string">&quot;while循环遍历&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">while</span>(itBegin!=itEnd) &#123;<br>cout&lt;&lt;*itBegin&lt;&lt;endl;<br>itBegin++;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;for循环遍历&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=v.<span class="hljs-built_in">begin</span>(); it!=v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout&lt;&lt;*it&lt;&lt;endl;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;stl遍历算法&quot;</span>&lt;&lt;endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),print);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="vector存放自定义数据类型">vector存放自定义数据类型</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(string name,<span class="hljs-type">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;age=age;<br><span class="hljs-keyword">this</span>-&gt;name=name;<br>&#125;<br>string name;<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;李白&quot;</span>,<span class="hljs-number">2000</span>)</span></span>;<br><span class="hljs-function">People <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;达摩&quot;</span>,<span class="hljs-number">1000</span>)</span></span>;<br><span class="hljs-function">People <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;王昭君&quot;</span>,<span class="hljs-number">900</span>)</span></span>;<br><span class="hljs-function">People <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;公孙离&quot;</span>,<span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">People <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">200</span>)</span></span>;<br>vector&lt;People&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br>v.<span class="hljs-built_in">push_back</span>(p5);<br>vector&lt;People*&gt; v1;<br>v1.<span class="hljs-built_in">push_back</span>(&amp;p1);<br>v1.<span class="hljs-built_in">push_back</span>(&amp;p2);<br>v1.<span class="hljs-built_in">push_back</span>(&amp;p3);<br>v1.<span class="hljs-built_in">push_back</span>(&amp;p4);<br>v1.<span class="hljs-built_in">push_back</span>(&amp;p5);<br><span class="hljs-keyword">for</span>(vector&lt;People&gt;::iterator it=v.<span class="hljs-built_in">begin</span>(); it!=v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;姓名:&quot;</span>&lt;&lt;it-&gt;name&lt;&lt;<span class="hljs-string">&quot; 年龄：&quot;</span>&lt;&lt;it-&gt;age&lt;&lt;endl;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;遍历自定义数据类型指针&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">for</span>(vector&lt;People*&gt;::iterator it=v1.<span class="hljs-built_in">begin</span>(); it!=v1.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;姓名:&quot;</span>&lt;&lt;(*it)-&gt;name&lt;&lt;<span class="hljs-string">&quot; 年龄：&quot;</span>&lt;&lt;(*it)-&gt;age&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="vector容器嵌套">vector容器嵌套</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//vector容器嵌套</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; v;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>vector&lt;<span class="hljs-type">int</span>&gt; v3;<br>vector&lt;<span class="hljs-type">int</span>&gt; v4;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++) &#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>v3.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">2</span>);<br>v4.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">3</span>);<br>&#125;<br>v.<span class="hljs-built_in">push_back</span>(v1);<br>v.<span class="hljs-built_in">push_back</span>(v2);<br>v.<span class="hljs-built_in">push_back</span>(v3);<br>v.<span class="hljs-built_in">push_back</span>(v4);<br><span class="hljs-keyword">for</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt;::iterator it=v.<span class="hljs-built_in">begin</span>(); it!=v.<span class="hljs-built_in">end</span>(); it++) &#123;<br><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator vit=(*it).<span class="hljs-built_in">begin</span>(); vit!=(*it).<span class="hljs-built_in">end</span>(); vit++) &#123;<br>cout&lt;&lt;*vit&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="vector容器插入和删除">vector容器插入和删除</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;v)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=v.<span class="hljs-built_in">begin</span>(); it!=v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout&lt;&lt;*it&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br><span class="hljs-built_in">print</span>(v);<br>v.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">print</span>(v);<br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(),<span class="hljs-number">60</span>);<br><span class="hljs-built_in">print</span>(v);<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">print</span>(v);<br>v.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">print</span>(v);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Deque">Deque</h5><p>双端数组，可以对头端进行插入和删除</p><h5 id="Stack（栈）：没啥可说的">Stack（栈）：没啥可说的</h5><h5 id="Queue（队列）：没啥可说的">Queue（队列）：没啥可说的</h5><h5 id="List">List</h5><p>注意：list不支持随机存取，所以没有[]和at的访问方式</p><h5 id="Set和Multiser">Set和Multiser</h5><p>set结构会自动排序，底层是二叉树</p><ul><li>set中不允许有重复的值</li><li>multiset允许有重复的值</li></ul><h5 id="Map">Map</h5><p>map中所以元素都是pair,底层为二叉树，可以根据key快速找到value</p><ul><li>map中不允许有重复key值元素</li><li>multimap中允许有重复key值元素</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
